/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under Ultimate Liberty license
  * SLA0044, the "License"; You may not use this file except in compliance with
  * the License. You may obtain a copy of the License at:
  *                             www.st.com/SLA0044
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "cmsis_os.h"
#include "adc.h"
#include "dac.h"
#include "dma.h"
#include "rtc.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "KS0108.h"
#include "glcd_menu.h"
#include "Dsp.h"
#include "PID.h"
#include "defines.h"
#include "max485.h"
#include "eeprom.h"
#include "stdlib.h"
#include "math.h"
#include "string.h"
#include "glcd_menu_functions.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
/* Private variables ---------------------------------------------------------*/

TaskHandle_t lcd_demo_handle = NULL;
TaskHandle_t main_thread_handle = NULL;
TaskHandle_t ph_calibration_thread_handle = NULL;
TaskHandle_t temp_calibration_thread_handle = NULL;
TaskHandle_t back_light_state_thread_handle = NULL;
TaskHandle_t input_button_thread_handle = NULL;
SemaphoreHandle_t lcd_semaphore;
int create_ph_calibration_task_flag = 0;
int delete_ph_calibration_task_flag = 0;
int create_temp_calibration_task_flag = 0;
int delete_temp_calibration_task_flag = 0;
Menu menu_list[menu_list_length];
Menu last_menu_list[menu_list_length];
uint8_t uart_buff[20];
int active_menu[MENU_DEPTH]={0};
int active_menu_sp = 0;
uint32_t adc_value[2*bufferLength]={0};
uint16_t pH_buffer[bufferLength];
uint16_t temp_buffer[bufferLength];
// moving variables
uint16_t ph_history[filterWindowLength]={0};
int32_t ph_sum=0;
uint16_t ph_window_pointer=0;
uint16_t temp_history[filterWindowLength]={0};
int32_t temp_sum=0;
uint16_t temp_window_pointer=0;
float p1_p =  0.00412 ;
float p2_p = -1.454 ;
float p1_t = -0.06613;
float p2_t = 128.17461 ;
float slope, zero, slope_percent = 0;
float pH = 0;
float temp = 0;
float ph_calibration_temp = 25 ;
float temp_compensation_coef = 0;
int32_t eeprom_buff;

uint8_t message[30];
uint8_t log_uart[10];
uint16_t ph_averaged = 0;
uint16_t pH_filtered ;
uint16_t temp_averaged = 0;
uint16_t temp_filtered = 0;
int16_t progress = 0;
int16_t last_progress = 0;
int16_t pump_on_off_state = 0;
// rtc 
RTC_TimeTypeDef rtc_time;
RTC_DateTypeDef rtc_date;
float *rtc_hour_p = &menu_list[0].values[3];
float *rtc_minute_p = &menu_list[0].values[4];
// Structure to store PID data and pointer to PID structure
struct pid_controller ctrldata;
pid_t pid;
// Control loop input,output and setpoint variables
float input = 0;
float output ;
float output_mA;
float *setpoint = &menu_list[8].values[3];
// Control loop gains
float *kp = &menu_list[10].values[0];
float *ki = &menu_list[10].values[1];
float *kd = &menu_list[10].values[2];
int auto_wash_state = 0;
int back_light_state=0;
int back_button_flag=0;
int ok_button_flag=0;
int up_button_flag =0;
int down_button_flag =0;
int left_button_flag =0;
int right_button_flag =0;
int please_wait_flag =0;
int m_num=0;
// PID sample time in ms
uint32_t sample_time = 10;
const float NIST_4[19] = {4.003, 3.999, 3.998, 3.999, 4.002, 4.008, 4.015, 4.024, 4.030, 4.035, 4.047, 4.060, 4.075, 4.091, 4.126, 4.164, 4.205, 4.227};
const float NIST_7[19] = {6.984, 6.951, 6.923, 6.900, 6.881, 6.865, 6.853, 6.844, 6.840, 6.838, 6.834, 6.833, 6.834, 6.836, 6.845, 6.859, 6.877, 6.886};
const float NIST_9[19] = {9.464, 9.395, 9.332, 9.276, 9.225, 9.180, 9.139, 9.102, 9.081, 9.068, 9.038, 9.011, 8.985, 8.962, 8.921, 8.885, 8.850, 8.833};
const float NIST_TEMP[19] = {0, 5, 10, 15, 20, 25, 30, 35, 38, 40, 45, 50, 55, 60, 70, 80, 90, 95};
extern const unsigned char Times_New_Roman25x26[] ;


/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void MX_FREERTOS_Init(void);
/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/
void main_thread(void *);
void lcd_print(void *);
void read_adc(void *);
void ph_calibration_thread(void *);
void temp_calibration_thread(void * pvParameters);
void pump_set_stroke(uint16_t stroke);
void read_setting_from_eeprom(void);
void light_thread(void* pvParameters);
void input_button_thread(void * pvParameters);
uint32_t get_timer_time(void);

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_ADC1_Init();
  MX_TIM2_Init();
  MX_DAC_Init();
  MX_RTC_Init();
  MX_USART3_UART_Init();
  MX_TIM5_Init();
  MX_TIM4_Init();
  /* USER CODE BEGIN 2 */

	lcd_semaphore = xSemaphoreCreateCounting(5,1);
	xTaskCreate(lcd_print,"lcd_print",128,( void * )1,3,&lcd_demo_handle);
	xTaskCreate(main_thread,"main_thread",512,( void * )1,2,&main_thread_handle);
	xTaskCreate(light_thread,"back_light",128,( void * )1,1,&back_light_state_thread_handle);
	xTaskCreate(input_button_thread,"input_button_thread",128,( void * )1,3,&input_button_thread_handle);
	//xTaskCreate(ph_calibration_thread,"calibration_thread",128,( void * )1,3,&ph_calibration_thread_handle);
	
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();

  /* Start scheduler */
  osKernelStart();
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 168;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 3;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */
void main_thread(void * pvParameters)
{		
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_4);
	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4,0);
	init_menu();
	
	#ifdef program_factory_config
		eeprom_buff = p1_p*float_to_int_factor;
		eeprom_write_data(p1_p_eeprom_add,&eeprom_buff,1);
		eeprom_buff = p2_p*float_to_int_factor;
		eeprom_write_data(p2_p_eeprom_add,&eeprom_buff,1);
		eeprom_buff = p1_t*float_to_int_factor;
		eeprom_write_data(p1_t_eeprom_add,&eeprom_buff,1);
		eeprom_buff = p2_t*float_to_int_factor;
		eeprom_write_data(p2_t_eeprom_add,&eeprom_buff,1);
		eeprom_buff = ph_calibration_temp*float_to_int_factor;
		eeprom_write_data(ph_calibration_temp_add,&eeprom_buff,1);
		eeprom_buff = PID_P*float_to_int_factor;
		eeprom_write_data(pid_p_eeprom_add,&eeprom_buff,1);
		eeprom_buff = PID_I*float_to_int_factor;
		eeprom_write_data(pid_i_eeprom_add,&eeprom_buff,1);
		eeprom_buff = PID_D*float_to_int_factor;
		eeprom_write_data(pid_d_eeprom_add,&eeprom_buff,1);
		eeprom_buff = CONTROLLER_THRESHOLD_MAX*float_to_int_factor;
		eeprom_write_data(relay_max_eeprom_add,&eeprom_buff,1);
		eeprom_buff = CONTROLLER_THRESHOLD_MIN*float_to_int_factor;
		eeprom_write_data(relay_min_eeprom_add,&eeprom_buff,1);
		eeprom_buff = CONTROLLER_ON_OFF;
		eeprom_write_data(controller_on_off_eeprom_add,&eeprom_buff,1);
		eeprom_buff = CONTROLLER_TYPE;
		eeprom_write_data(controller_type_eeprom_add,&eeprom_buff,1);
		eeprom_buff = CONTROLLER_SETPOINT*float_to_int_factor;
		eeprom_write_data(controller_setpoint_eeprom_add,&eeprom_buff,1);
		eeprom_buff = ATC;
		eeprom_write_data(ATC_eeprom_add,&eeprom_buff,1);
		eeprom_buff = relay1_func;
		eeprom_write_data(REL_FUNC_1_EEPROM_ADD,&eeprom_buff,1);
		eeprom_buff = relay2_func;
		eeprom_write_data(REL_FUNC_2_EEPROM_ADD,&eeprom_buff,1);
		eeprom_buff = relay3_func;
		eeprom_write_data(REL_FUNC_3_EEPROM_ADD,&eeprom_buff,1);
		eeprom_buff = relay4_func;
		eeprom_write_data(REL_FUNC_4_EEPROM_ADD,&eeprom_buff,1);
		eeprom_buff = STABILIZATION_TIME;
		eeprom_write_data(STABILIZATION_TIME_EEPROM_ADD,&eeprom_buff,1);
		eeprom_buff = STABILIZATION_RANGE*float_to_int_factor;
		eeprom_write_data(STABILIZATION_RANGE_EEPROM_ADD,&eeprom_buff,1);
	#endif
	
	read_setting_from_eeprom();
	// Prepare PID controller for operation
	pid = pid_create(&ctrldata, &input, &output, setpoint, *kp, *ki, *kd);
	// Set controler output limits from 0 to 100
	pid_limits(pid, 0, 100);
	// Allow PID to compute and change output
	pid_auto(pid);
	// Set sampling time
	pid_sample(pid, sample_time);
	// Set the direction of controller
	pid_direction(pid, E_PID_REVERSE);
	HAL_DAC_Start(&hdac,DAC_CHANNEL_1);
	HAL_DAC_Start(&hdac,DAC_CHANNEL_2);
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0);
	MAX485_send_string("starting ...",14,100);
	HAL_TIM_Base_Start_IT(&htim2);
	HAL_ADC_Start_DMA(&hadc1, adc_value, 2*bufferLength);
	GLCD_Initalize();
	GLCD_ClearScreen();
	glcd_set_font_with_num(1);
	glcd_draw_string_xy(20,20,"Atrovan",0,0,0);
	for(int i=0; i<100;i++)
	{
		__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4,i);
		osDelay(15);
	}
	//HAL_GPIO_WritePin(Power_led_GPIO_Port,Power_led_Pin,GPIO_PIN_SET);
	HAL_UART_Receive_IT(&huart3,uart_buff,1);
	
	while(1)
	{
		if( xSemaphoreTake( lcd_semaphore, 1000 ) == pdTRUE )
		{
			HAL_RTC_GetTime(&hrtc,&rtc_time,FORMAT_BIN);
			HAL_RTC_GetDate(&hrtc,&rtc_date,FORMAT_BIN);
			*rtc_minute_p = rtc_time.Minutes;
			*rtc_hour_p = rtc_time.Hours;
			update_menu_from_variables(active_menu[active_menu_sp]);
			if(please_wait_flag ==1)
			{
				please_wait_flag =0;
				GLCD_Clear_Ram();
				glcd_set_font_with_num(0);
				glcd_draw_string_xy_with_ram(35,28,"Please Wait",0,0,0);
				GLCD_Write_Ram();
			}
			else if(active_menu[active_menu_sp] == 0 )
			{
				print_main_page(active_menu[active_menu_sp]);
				HAL_GPIO_WritePin(Status_led_GPIO_Port,Status_led_Pin,GPIO_PIN_SET);
				back_light_state =0; // set backlight to 100%
			}
			else 
			{
				print_menu(active_menu[active_menu_sp]);
			}
		}
		
		if(create_ph_calibration_task_flag == 1)
		{
			create_ph_calibration_task_flag = 0;
			progress = 0;
			last_progress = 0;
			xTaskCreate(ph_calibration_thread,"ph_calibration_thread",128,( void * )1,3,&ph_calibration_thread_handle);
		}
		if(delete_ph_calibration_task_flag == 1)
		{
			delete_ph_calibration_task_flag = 0;
			if( ph_calibration_thread_handle != NULL )
			{
				vTaskDelete( ph_calibration_thread_handle );
				back_light_state = 0;// 100% back light
				HAL_TIM_Base_Stop(&htim5);
				ph_calibration_thread_handle = NULL;
				progress = 0;
				last_progress = 0;
			}
		}
		if(create_temp_calibration_task_flag == 1)
		{
			create_temp_calibration_task_flag = 0;
			progress = 0;
			last_progress = 0;
			xTaskCreate(temp_calibration_thread,"temp_calibration_thread",128,( void * )1,3,&temp_calibration_thread_handle);
		}
		if(delete_temp_calibration_task_flag == 1)
		{
			delete_temp_calibration_task_flag = 0;
			if( temp_calibration_thread_handle != NULL)
			{
				vTaskDelete( temp_calibration_thread_handle );
				back_light_state = 0;// 100% back light
				HAL_TIM_Base_Stop(&htim5);
				temp_calibration_thread_handle = NULL;
				progress = 0;
				last_progress = 0;
			}
		}
		osDelay(5);
	}
}

void lcd_print(void * pvParameters)
{
	while(1)
	{
		osDelay(1000);
		update_menu_from_variables(active_menu[active_menu_sp]);
		if(active_menu[active_menu_sp] == 0 )
		{
			if(  menu_list[0].values[0] != last_menu_list[0].values[0] || menu_list[0].values[2] != last_menu_list[0].values[2] 
				|| menu_list[0].values[3] != last_menu_list[0].values[3] || menu_list[0].values[4] != last_menu_list[0].values[4] 
				|| menu_list[0].values[5] != last_menu_list[0].values[5] )
			{
				xSemaphoreGive( lcd_semaphore );
				last_menu_list[0] = menu_list[0];
			}
		}
		if( active_menu[active_menu_sp] == 3 || active_menu[active_menu_sp] == 5 || active_menu[active_menu_sp] == 13 || active_menu[active_menu_sp] == 15 )
		{ 
			if( progress >= 100 || menu_list[3].values[2] != last_menu_list[3].values[2] || menu_list[5].values[2] != last_menu_list[5].values[2])
			{
				xSemaphoreGive( lcd_semaphore );
				last_menu_list[3] = menu_list[3];
				last_menu_list[5] = menu_list[5];
			}
			
		}
	}
}

void input_button_thread(void * pvParameters)//other input buttons are handeled in glcd_menu get_user_input
{
	while(1)
	{
		m_num = active_menu[active_menu_sp]; //active menu number
		
		if( ok_button_flag == 1)
		{
			ok_button_flag = 0;
			if(m_num == 0)
			{
				active_menu_sp++;
				active_menu[active_menu_sp] = 1;
			}
			else
			{
				if(menu_list[m_num].menu_strings[menu_list[m_num].menu_pointer][1] == 'O' && menu_list[m_num].menu_strings[menu_list[m_num].menu_pointer][2] == 'K')
				{
//				please_wait_flag =1;
//				xSemaphoreGive( lcd_semaphore);
//        osDelay(300);
					menu_list[m_num].fun_ptr();
				}
				if(m_num != menu_list[m_num].next_menu_id[menu_list[m_num].menu_pointer]) // if we should go to another menu
				{
					active_menu_sp++;
					active_menu[active_menu_sp] = menu_list[m_num].next_menu_id[menu_list[m_num].menu_pointer];
				}
			}
			xSemaphoreGive( lcd_semaphore);
		}
		
		
		
		if(back_button_flag == 1 )
		{
			back_button_flag = 0;
			int cnt =0;
			while(HAL_GPIO_ReadPin(Esc_GPIO_Port,Esc_Pin) == 0 && cnt < 15)
			{
				cnt++;
				osDelay(50);
			}
			if(menu_list[m_num].run_on_exit == 1)
			{
//				please_wait_flag =1;
//				xSemaphoreGive( lcd_semaphore);
//				osDelay(300);
				menu_list[m_num].fun_ptr();
			}
			if(cnt < 15) //short press
			{
				if(active_menu_sp > 0)
				{
					active_menu_sp--;
				}
			}
			else//long press
			{
				active_menu_sp = 0;
			}
			xSemaphoreGive( lcd_semaphore);
		}
		
		
		if(right_button_flag == 1)
		{
			right_button_flag = 0;
			if(menu_list[m_num].values[menu_list[m_num].menu_pointer] < menu_list[m_num].value_max[menu_list[m_num].menu_pointer])
			{
				menu_list[m_num].values[menu_list[m_num].menu_pointer] += menu_list[m_num].value_resolution[menu_list[m_num].menu_pointer] ;
			}
			else if(menu_list[m_num].value_resolution[menu_list[m_num].menu_pointer] != 0)
			{
				menu_list[m_num].values[menu_list[m_num].menu_pointer] = menu_list[m_num].value_min[menu_list[m_num].menu_pointer];
			}
			xSemaphoreGive( lcd_semaphore);
			
			for(int i=0;HAL_GPIO_ReadPin(Right_GPIO_Port,Right_Pin) == 0 && i<100 ; i++)
			{
				osDelay(5);
			}
			osDelay(5);
			while(HAL_GPIO_ReadPin(Right_GPIO_Port,Right_Pin) == 0)
			{
				if(menu_list[m_num].values[menu_list[m_num].menu_pointer] < menu_list[m_num].value_max[menu_list[m_num].menu_pointer])
				{
					menu_list[m_num].values[menu_list[m_num].menu_pointer] += menu_list[m_num].value_resolution[menu_list[m_num].menu_pointer] ;
				}
				else if(menu_list[m_num].value_resolution[menu_list[m_num].menu_pointer] != 0)
				{
					menu_list[m_num].values[menu_list[m_num].menu_pointer] = menu_list[m_num].value_min[menu_list[m_num].menu_pointer];
				}
				xSemaphoreGive( lcd_semaphore);
				osDelay(50);
			}
		}
		
		
		
		if(left_button_flag ==1)
		{
			left_button_flag = 0;
			if(menu_list[m_num].values[menu_list[m_num].menu_pointer] > menu_list[m_num].value_min[menu_list[m_num].menu_pointer])
			{
				menu_list[m_num].values[menu_list[m_num].menu_pointer] -= menu_list[m_num].value_resolution[menu_list[m_num].menu_pointer] ;
			}
			else if(menu_list[m_num].value_resolution[menu_list[m_num].menu_pointer] != 0)
			{
				menu_list[m_num].values[menu_list[m_num].menu_pointer] = menu_list[m_num].value_max[menu_list[m_num].menu_pointer];
			}
			xSemaphoreGive( lcd_semaphore);
			 
			for(int i=0;HAL_GPIO_ReadPin(Left_GPIO_Port,Left_Pin) == 0 && i<100 ; i++)
			{
				osDelay(5);
			}
			osDelay(5);
			while(HAL_GPIO_ReadPin(Left_GPIO_Port,Left_Pin) == 0)
			{
				if(menu_list[m_num].values[menu_list[m_num].menu_pointer] > menu_list[m_num].value_min[menu_list[m_num].menu_pointer])
				{
					menu_list[m_num].values[menu_list[m_num].menu_pointer] -= menu_list[m_num].value_resolution[menu_list[m_num].menu_pointer] ;
				}
				else if(menu_list[m_num].value_resolution[menu_list[m_num].menu_pointer] != 0)
				{
					menu_list[m_num].values[menu_list[m_num].menu_pointer] = menu_list[m_num].value_max[menu_list[m_num].menu_pointer];
				}
				xSemaphoreGive( lcd_semaphore);
				osDelay(50);
			}
		}
		
		if( up_button_flag == 1)
		{
			up_button_flag = 0 ;
			if(menu_list[m_num].menu_pointer > 0)
			{
			menu_list[m_num].menu_pointer--;
			}
			else
			{
				menu_list[m_num].menu_pointer = menu_list[m_num].menu_item_count-1;
			}
			xSemaphoreGive( lcd_semaphore);
		}
		
		
		if(down_button_flag ==1)
		{
			down_button_flag =0;
			if(menu_list[m_num].menu_pointer < menu_list[m_num].menu_item_count-1)
			{
			menu_list[m_num].menu_pointer++;
			}
			else
			{
				menu_list[m_num].menu_pointer = 0;
			}
			xSemaphoreGive( lcd_semaphore);
		}

		osDelay(100);
	}
}
void ph_calibration_thread(void * pvParameters)
{
	char sprintf_buff[20];
	uint16_t last_ph_filtered = pH_filtered ;
	HAL_TIM_Base_Start(&htim5);
	uint32_t start_time = get_timer_time();
	back_light_state = 1;
	while(1)
	{
		if(abs(pH_filtered - last_ph_filtered) * 0.00413  >= STABILIZATION_RANGE ) // 0.00413 convert mv to pH
		{
			xSemaphoreGive( lcd_semaphore );
			sprintf(sprintf_buff,"%.5f\n",abs(pH_filtered - last_ph_filtered) * 0.00413);
			MAX485_send_string(sprintf_buff,strlen(sprintf_buff),100);
			MAX485_send_string("reset\n",6,100);
			last_ph_filtered = pH_filtered;
			start_time = get_timer_time();
			
			back_light_state = 1;
		}
		progress = (100/STABILIZATION_TIME)*(get_timer_time() - start_time)/1000 ;
		if(progress > 100 )
		{
			progress = 100;
		}
		if(progress < 0 )
		{
			progress = 0;
		}	
		MAX485_send_string("ph calibration\n",15,100);
		sprintf(sprintf_buff,"%d\n",progress);
		MAX485_send_string(sprintf_buff,strlen(sprintf_buff),100);
		osDelay(1000);
	}
}

void temp_calibration_thread(void * pvParameters)
{
	char sprintf_buff[10];
	uint16_t last_temp_filtered = temp_filtered;
	HAL_TIM_Base_Start(&htim5);
	uint32_t start_time = get_timer_time();
	back_light_state = 1;
	while(1)
	{
		if(abs(temp_filtered - last_temp_filtered) >= 6)
		{
			xSemaphoreGive( lcd_semaphore );
			last_temp_filtered = temp_filtered;
			start_time = get_timer_time();
			MAX485_send_string("reset\n",10,100);
			back_light_state = 1;
		}
		progress = (100/STABILIZATION_TIME)*(get_timer_time() - start_time)/1000  ;
		if(progress > 100 )
		{
			progress = 100;
		}
		if(progress < 0 )
		{
			progress = 0;
		}
		MAX485_send_string("temp calibration\n",20,100);
		sprintf(sprintf_buff,"%d\n",temp_filtered);
		MAX485_send_string(sprintf_buff,7,100);
		osDelay(1000);
	}
}
void light_thread(void* pvParameters)
{
	osDelay(3000);
	while(1)
	{
		
		if(back_light_state == 0)
		{
			__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4,100);
		}
		
		if(back_light_state == 1)
		{
			HAL_GPIO_TogglePin(Status_led_GPIO_Port,Status_led_Pin);
			for(int i=100; i>20;i--)
			{
				__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4,i);
				osDelay(10);
			}
			for(int i=20; i<100;i++)
			{
				__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4,i);
				osDelay(10);
			}
			osDelay(3000);
			
		}
		
		if(GLCD_ReadStatus(0) == 0x20 || GLCD_ReadStatus(1) == 0x20) // lcd is reseted
		{
			//GLCD_WriteCommand((DISPLAY_ON_CMD | ON), i); done in GLCD_WriteData(unsigned char dataToWrite) 
			xSemaphoreGive( lcd_semaphore );
		}
		osDelay(100);
	}
}



/**
  * @brief  This function sets pump stroke.
	* @param  stroke: stroke value from 0 to 100.
  * @retval None
  */ 
void pump_set_stroke(uint16_t stroke)
{
	uint16_t dac_value = (4095 * ((4 + stroke * 0.16) * 0.1) / 3.3);
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_value);
}
void send_pH_4_20(float pH)
{
	
	uint16_t dac_value = (4095 * ((4.0f + pH * 16.0f / 14.0f) * 0.1f) / 3.3f);
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, dac_value);
}

void read_setting_from_eeprom(void)
{
	char sprintf_buff[40];
	eeprom_read_data(p1_p_eeprom_add,&eeprom_buff,1);
	p1_p = eeprom_buff / float_to_int_factor;
	sprintf(sprintf_buff,"p1_p:%.5f \n",p1_p);
	MAX485_send_string(sprintf_buff,20,100);
	
	eeprom_read_data(p2_p_eeprom_add,&eeprom_buff,1);
	p2_p = eeprom_buff / float_to_int_factor;
	sprintf(sprintf_buff,"p2_p:%.5f \n",p2_p);
	MAX485_send_string(sprintf_buff,20,100);
	
	eeprom_read_data(ph_calibration_temp_add,&eeprom_buff,1);
	ph_calibration_temp = eeprom_buff / float_to_int_factor;
	sprintf(sprintf_buff,"cal_temp:%.5f \n",ph_calibration_temp);
	MAX485_send_string(sprintf_buff,20,100);
	
	eeprom_read_data(p1_t_eeprom_add,&eeprom_buff,1);
	p1_t = eeprom_buff / float_to_int_factor;
	sprintf(sprintf_buff,"p1_t:%.5f \n",p1_t);
	MAX485_send_string(sprintf_buff,20,100);
	
	eeprom_read_data(p2_t_eeprom_add,&eeprom_buff,1);
	p2_t = eeprom_buff / float_to_int_factor;
	sprintf(sprintf_buff,"p2_t:%.5f \n",p2_t);
	MAX485_send_string(sprintf_buff,20,100);
	
	eeprom_read_data(pid_p_eeprom_add,&eeprom_buff,1);
	PID_P = eeprom_buff / float_to_int_factor;
	eeprom_read_data(pid_i_eeprom_add,&eeprom_buff,1);
	PID_I = eeprom_buff / float_to_int_factor;
	eeprom_read_data(pid_d_eeprom_add,&eeprom_buff,1);
	PID_D = eeprom_buff / float_to_int_factor;
	eeprom_read_data(relay_max_eeprom_add,&eeprom_buff,1);
	CONTROLLER_THRESHOLD_MAX = eeprom_buff / float_to_int_factor;
	eeprom_read_data(relay_min_eeprom_add,&eeprom_buff,1);
	CONTROLLER_THRESHOLD_MIN = eeprom_buff / float_to_int_factor;
	eeprom_read_data(controller_on_off_eeprom_add,&eeprom_buff,1);
	CONTROLLER_ON_OFF = eeprom_buff ;
	eeprom_read_data(controller_type_eeprom_add,&eeprom_buff,1);
	CONTROLLER_TYPE = eeprom_buff ;
	eeprom_read_data(controller_setpoint_eeprom_add,&eeprom_buff,1);
	CONTROLLER_SETPOINT = eeprom_buff / float_to_int_factor;
	eeprom_read_data(ATC_eeprom_add,&eeprom_buff,1);
	ATC = eeprom_buff ;
	eeprom_read_data(REL_FUNC_1_EEPROM_ADD,&eeprom_buff,1);
	relay1_func = eeprom_buff ;
	eeprom_read_data(REL_FUNC_2_EEPROM_ADD,&eeprom_buff,1);
	relay2_func = eeprom_buff ;
	eeprom_read_data(REL_FUNC_3_EEPROM_ADD,&eeprom_buff,1);
	relay3_func = eeprom_buff ;
	eeprom_read_data(REL_FUNC_4_EEPROM_ADD,&eeprom_buff,1);
	relay4_func = eeprom_buff ;
	eeprom_read_data(STABILIZATION_TIME_EEPROM_ADD,&eeprom_buff,1);
	STABILIZATION_TIME = eeprom_buff ;
	eeprom_read_data(STABILIZATION_RANGE_EEPROM_ADD,&eeprom_buff,1);
	STABILIZATION_RANGE= eeprom_buff/float_to_int_factor ;
	slope = 1000 / (p1_p * 4095);
	zero = 1000 * (p2_p + 1.454f)/ (p1_p * 4095);
	slope_percent = 100 * slope / 59.16f;
	Change_Menu_Items(22,1,NULL,-1,slope_percent,-1);
	Change_Menu_Items(22,2,NULL,-1,zero,-1);
}
void set_date_time(void)
{
	rtc_time.Hours = HOUR;
	rtc_time.Minutes = MINUTE;
	rtc_time.Seconds=1;
	rtc_date.Date = DATE;
	rtc_date.Month = MONTH;
	rtc_date.Year = YEAR;
	HAL_RTC_SetTime(&hrtc,&rtc_time,FORMAT_BIN );
	HAL_RTC_SetDate(&hrtc,&rtc_date,FORMAT_BIN );
}
uint32_t get_timer_time()
{
	uint32_t counter ;
	counter = __HAL_TIM_GetCounter(&htim5);
	counter = counter/2;
	return counter;
}
void set_pid_coefficients(void)
{
	pid = pid_create(&ctrldata, &input, &output, setpoint, *kp, *ki, *kd);
	// Set controler output limits from 0 to 90
	pid_limits(pid, 0, 100);
	// Allow PID to compute and change output
	pid_auto(pid);
	// Set sampling time
	pid_sample(pid, sample_time);
	// Set the direction of controller
	pid_direction(pid, E_PID_REVERSE);
	eeprom_buff = *kp * float_to_int_factor;
	eeprom_write_data(pid_p_eeprom_add,&eeprom_buff,1);
	eeprom_buff = *ki * float_to_int_factor;
	eeprom_write_data(pid_i_eeprom_add,&eeprom_buff,1);
	eeprom_buff = *kd * float_to_int_factor;
	eeprom_write_data(pid_d_eeprom_add,&eeprom_buff,1);
	eeprom_buff = CONTROLLER_ON_OFF;
	eeprom_write_data(controller_on_off_eeprom_add,&eeprom_buff,1);
	eeprom_buff = CONTROLLER_TYPE;
	eeprom_write_data(controller_type_eeprom_add,&eeprom_buff,1);
	eeprom_buff = CONTROLLER_SETPOINT* float_to_int_factor;
	eeprom_write_data(controller_setpoint_eeprom_add,&eeprom_buff,1);
}



void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
	HAL_ADC_Stop_DMA(&hadc1);
	data_spliter(adc_value, bufferLength,pH_buffer,temp_buffer);
	
	temp_averaged = average(temp_buffer, bufferLength);
	temp_filtered = best_moving_average(temp_averaged, temp_history, &temp_sum, &temp_window_pointer);
	temp = p1_t * temp_filtered + p2_t;
	temp = roundf(temp * 10.0f) / 10.0f; 
	
	
	ph_averaged = average(pH_buffer, bufferLength);
	pH_filtered = best_moving_average(ph_averaged, ph_history, &ph_sum, &ph_window_pointer);
	if(ATC == 1)
	{
		temp_compensation_coef = (ph_calibration_temp + 273.15f) / (temp + 273.15f);
		pH = (temp_compensation_coef * p1_p * pH_filtered + p2_p) + p1_p*(1-temp_compensation_coef)*2047;
	}
	else
	{
		pH = p1_p * pH_filtered + p2_p;
	}
	pH = roundf(pH * 100.0f) / 100.0f; 
	if(pH > 14)
	{
		pH = 14;
	}
	if(pH < 0)
	{
		pH = 0;
	}
	send_pH_4_20(pH);
	
	if(CONTROLLER_ON_OFF == 0) // controller is ON
	{
		if(CONTROLLER_TYPE == 0) // controller type is pid
		{
			relay_on_off(pump_func_num,0);
			/* Updating PID input*/
			input = pH;
			/* Compute new PID output*/
			pid_compute(pid);
			output_mA = 4 + output*16/100;
			pump_set_stroke(output);
		}
		else if(CONTROLLER_TYPE == 1)// controller type is relay
		{
			uint16_t threshold = (CONTROLLER_THRESHOLD_MAX - CONTROLLER_THRESHOLD_MIN)/4;
			uint16_t mean = (CONTROLLER_THRESHOLD_MAX + CONTROLLER_THRESHOLD_MIN)/2;
			if (pH > mean + threshold ) // pH is bigger than maximum value
			{
				pump_on_off_state = 1;
				relay_on_off(pump_func_num,pump_on_off_state);
			}
			else if (pH < mean - threshold )
			{
				pump_on_off_state = 0;
				relay_on_off(pump_func_num,pump_on_off_state);
			}
		}
	}
	else
	{
		relay_on_off(pump_func_num,0);
		output=0;
		output_mA = 0;
	}
}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	get_user_input(uart_buff,active_menu);
	//MAX485_send_string(uart_buff,1,100);
	HAL_UART_Receive_IT(&huart3,uart_buff,1);
	xSemaphoreGiveFromISR( lcd_semaphore, NULL );
}

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
	if (htim->Instance == TIM5) 
	{
		auto_wash_handler(&auto_wash_state);
  }
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	//HAL_GPIO_WritePin(Status_led_GPIO_Port ,Status_led_Pin , GPIO_PIN_RESET);
	for(int i=0; i<200000;i++)
	{
		for(int j=0; j<15;j++);
	}
	//HAL_GPIO_WritePin(Status_led_GPIO_Port ,Status_led_Pin , GPIO_PIN_SET);
	if(GPIO_Pin==Esc_Pin)
	{
		if(HAL_GPIO_ReadPin(Esc_GPIO_Port,Esc_Pin)==0)
		{
		//HAL_UART_Transmit(&huart2,"ESC\n",4,100);
			uart_buff[0]='e';
			get_user_input(uart_buff,active_menu);
		}
	}
	
	if(GPIO_Pin==Enter_Pin)
	{
		if(HAL_GPIO_ReadPin(Enter_GPIO_Port,Enter_Pin)==0)
		{
		//HAL_UART_Transmit(&huart2,"ESC\n",4,100);
			uart_buff[0]='\n';
			get_user_input(uart_buff,active_menu);
		}
	}
	if(GPIO_Pin==Up_Pin)
	{
		if(HAL_GPIO_ReadPin(Up_GPIO_Port,Up_Pin)==0)
		{
		//HAL_UART_Transmit(&huart2,"ESC\n",4,100);
			uart_buff[0]='w';
			get_user_input(uart_buff,active_menu);
		}
	}
	if(GPIO_Pin==Down_Pin)
	{
		if(HAL_GPIO_ReadPin(Down_GPIO_Port,Down_Pin)==0)
		{
		//HAL_UART_Transmit(&huart2,"ESC\n",4,100);
			uart_buff[0]='s';
			get_user_input(uart_buff,active_menu);
		}
	}
	if(GPIO_Pin==Right_Pin)
	{
		if(HAL_GPIO_ReadPin(Right_GPIO_Port,Right_Pin)==0)
		{
		//HAL_UART_Transmit(&huart2,"ESC\n",4,100);
			uart_buff[0]='d';
			get_user_input(uart_buff,active_menu);
		}
	}
	if(GPIO_Pin==Left_Pin)
	{
		if(HAL_GPIO_ReadPin(Left_GPIO_Port,Left_Pin)==0)
		{
		//HAL_UART_Transmit(&huart2,"ESC\n",4,100);
			uart_buff[0]='a';
			get_user_input(uart_buff,active_menu);
		}
	}
	
	
	//MAX485_send_string(uart_buff,13,100);
	
	
}
/* USER CODE END 4 */

/**
  * @brief  Period elapsed callback in non blocking mode
  * @note   This function is called  when TIM1 interrupt took place, inside
  * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */
	if (htim->Instance == TIM2) {
    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_value,2*bufferLength);
  }
  /* USER CODE END Callback 1 */
}

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
