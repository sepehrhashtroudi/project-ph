/**
  ******************************************************************************
  * @file    glcd_menu.c 
  * @brief   general menu for glcd.
  ******************************************************************************
	by sepehr hashtroudi
	sepehrhashtroudi@gmail.com
  ******************************************************************************
  */
#include "glcd_menu.h"
#include <string.h>
#include "KS0108.h"
#include <string.h>
#include "usart.h"
//#include "font5x8.h"
#include "graphic.h"
#include <stdlib.h>
#include "max485.h"
#include "glcd_menu_functions.h"
#include "defines.h"
extern Menu menu_list[menu_list_length];
extern void set_date_time(void);
extern uint16_t pH_filtered;
extern void set_pid_coefficients(void);
extern float output_mA;
extern int16_t pump_on_off_state;
extern int16_t progress;
extern int create_ph_calibration_task_flag;
extern int delete_ph_calibration_task_flag;
extern int create_temp_calibration_task_flag;
extern int delete_temp_calibration_task_flag;
extern float pH;
extern float temp;



void init_menu(void)
{
	strcpy(menu_list[0].menu_name , "first page");
	strcpy(menu_list[0].menu_strings[0],  "%.2f");
	strcpy(menu_list[0].menu_strings[1] , "ph");
	strcpy(menu_list[0].menu_strings[2] , "%.1f `c");
	strcpy(menu_list[0].menu_strings[3] , "%02d:%02d");//hour & minute
	strcpy(menu_list[0].menu_strings[5] , "%.1f mA");
	//strcpy(menu_list[0].menu_strings[5] , "%d"); //minute
	menu_list[0].menu_id=0;
	menu_list[0].menu_item_count = 6;
	menu_list[0].menu_pointer=0;
	menu_list[0].values[0]=7;
	menu_list[0].values[3]=10;
	menu_list[0].x_position[0]=64;
	menu_list[0].x_position[1]=92;
	menu_list[0].x_position[2]=64;
	menu_list[0].x_position[3]=16;
	menu_list[0].x_position[4]=16;
	menu_list[0].x_position[5]=105;
	menu_list[0].y_position[0]=4;
	menu_list[0].y_position[1]=15;
	menu_list[0].y_position[2]=35;
	menu_list[0].y_position[3]=52;
	menu_list[0].y_position[4]=52;
	menu_list[0].y_position[5]=52;
	menu_list[0].font[0]=1;
	menu_list[0].font[1]=0;
	menu_list[0].font[2]=0;
	menu_list[0].font[3]=0;
	menu_list[0].font[4]=0;
	menu_list[0].font[5]=0;
	menu_list[0].run_on_exit=0;
	
	strcpy(menu_list[1].menu_name , "Main menu");
	strcpy(menu_list[1].menu_strings[0],  " Calibration ");
	strcpy(menu_list[1].menu_strings[1] , " Controller ");
	strcpy(menu_list[1].menu_strings[2] , " Time ");
	strcpy(menu_list[1].menu_strings[3] , " Relay function ");
	strcpy(menu_list[1].menu_strings[4] , " Relay state ");
	menu_list[1].menu_id=1;
	menu_list[1].menu_item_count = 5;
	menu_list[1].next_menu_id[0]=7;
	menu_list[1].next_menu_id[1]=8;
	menu_list[1].next_menu_id[2]=11;
	menu_list[1].next_menu_id[3]=17;
	menu_list[1].next_menu_id[4]=18;
	menu_list[1].menu_pointer=0;
	menu_list[1].run_on_exit=0;
	
	strcpy(menu_list[2].menu_name , " Step 1 ");
	strcpy(menu_list[2].menu_strings[0] , " Buffer pH:%.1f ");
	strcpy(menu_list[2].menu_strings[1] , " OK ");
	menu_list[2].next_menu_id[0]=2;
	menu_list[2].next_menu_id[1]=3;
	menu_list[2].values[0]=5.000;
	menu_list[2].value_resolution[0]=1.0000;
	menu_list[2].value_max[0]=14;
	menu_list[2].menu_id=2;
	menu_list[2].menu_item_count = 2;
	menu_list[2].menu_pointer=0;
	menu_list[2].fun_ptr = &ph_calibration_step1;
	menu_list[2].run_on_exit=0;
	
	strcpy(menu_list[3].menu_name , " Step 1 ");
	strcpy(menu_list[3].menu_strings[0],  " Calibrating ... ");
	strcpy(menu_list[3].menu_strings[1] , "  ");
	strcpy(menu_list[3].menu_strings[2] , " Please Wait ");
	menu_list[3].next_menu_id[0]=3;
	menu_list[3].next_menu_id[1]=3;
	menu_list[3].next_menu_id[2]=3;
	menu_list[3].menu_id=3;
	menu_list[3].menu_item_count = 3;
	menu_list[3].menu_pointer=1;
	menu_list[3].fun_ptr = &ph_calibration_waiting_1;
	menu_list[3].run_on_exit=0;
	
	strcpy(menu_list[4].menu_name , " Step 2 ");
	strcpy(menu_list[4].menu_strings[0] , " Buffer pH:%.1f ");
	strcpy(menu_list[4].menu_strings[1] , " OK ");
	menu_list[4].next_menu_id[0]=4;
	menu_list[4].next_menu_id[1]=5;
	menu_list[4].menu_id=4;
	menu_list[4].values[0]=7.000;
	menu_list[4].value_resolution[0]=1.0000;
	menu_list[4].value_max[0]=14;
	menu_list[4].menu_item_count = 2;
	menu_list[4].menu_pointer=0;
	menu_list[4].fun_ptr = &ph_calibration_step1;
	menu_list[4].run_on_exit=0;
	
	strcpy(menu_list[5].menu_name , " Step 2 ");
	strcpy(menu_list[5].menu_strings[0],  " Calibrating ... ");
	strcpy(menu_list[5].menu_strings[1] , "  ");
	strcpy(menu_list[5].menu_strings[2] , " Please Wait ");
	menu_list[5].next_menu_id[0]=5;
	menu_list[5].next_menu_id[1]=5;
	menu_list[5].next_menu_id[2]=5;
	menu_list[5].menu_id=5;
	menu_list[5].menu_item_count = 3;
	menu_list[5].menu_pointer=1;
	menu_list[5].fun_ptr = &ph_calibration_waiting_2;
	menu_list[5].run_on_exit=0;
	
	strcpy(menu_list[6].menu_name , " Step 3 ");
	strcpy(menu_list[6].menu_strings[0],  " Calibration Done ");
	strcpy(menu_list[6].menu_strings[1] , " OK ");
	menu_list[6].next_menu_id[0]=6;
	menu_list[6].next_menu_id[1]=0;
	menu_list[6].menu_id=6;
	menu_list[6].menu_item_count = 2;
	menu_list[6].menu_pointer=1;
	menu_list[6].fun_ptr = &ph_calculate_calibration_coefficients;
	menu_list[6].run_on_exit=1;
	
	strcpy(menu_list[7].menu_name , " Select Sensor");
	strcpy(menu_list[7].menu_strings[0],  " pH ");
	strcpy(menu_list[7].menu_strings[1] , " Temp ");
	menu_list[7].next_menu_id[0]=2;
	menu_list[7].next_menu_id[1]=12;
	menu_list[7].menu_id=7;
	menu_list[7].menu_item_count = 2;
	menu_list[7].menu_pointer=0;
	menu_list[7].run_on_exit=0;
	
	strcpy(menu_list[8].menu_name , " Controller ");
	strcpy(menu_list[8].menu_strings[0], " < ON > , < OFF >");
	strcpy(menu_list[8].menu_strings[1], " < PID > , < RELAY > ");
	strcpy(menu_list[8].menu_strings[2], " Coefficients , Hysteresis ");
	strcpy(menu_list[8].menu_strings[3], " Setpoint: %.1f ");
	menu_list[8].next_menu_id[0]=8;
	menu_list[8].next_menu_id[1]=8;
	menu_list[8].next_menu_id[2]=9;
	menu_list[8].next_menu_id[3]=8;
	menu_list[8].values[0]=0;
	menu_list[8].values[1]=0;
	menu_list[8].values[2]=0;
	menu_list[8].values[3]=7.1;
	menu_list[8].value_resolution[0]=1.00000;
	menu_list[8].value_resolution[1]=1.00000;
	menu_list[8].value_resolution[2]=1.00000;
	menu_list[8].value_resolution[3]=0.10000;
	menu_list[8].value_max[0]=1;
	menu_list[8].value_max[1]=1;
	menu_list[8].value_max[2]=1;
	menu_list[8].value_max[3]=14;
	menu_list[8].menu_id=8;
	menu_list[8].menu_item_count = 4;
	menu_list[8].menu_pointer=0;
	menu_list[8].fun_ptr = &set_controller_set_point;
	menu_list[8].run_on_exit=1;

	
	
	strcpy(menu_list[9].menu_name , "Hysteresis");
	strcpy(menu_list[9].menu_strings[0], " Max: %.1f ");
	strcpy(menu_list[9].menu_strings[1], " Min: %.1f ");
	menu_list[9].next_menu_id[0]=9;
	menu_list[9].next_menu_id[1]=9;
	menu_list[9].next_menu_id[2]=0;
	menu_list[9].values[0]=8;
	menu_list[9].values[1]=6;
	menu_list[9].value_resolution[0]=0.10000;
	menu_list[9].value_resolution[1]=0.10000;
	menu_list[9].value_max[0]=14;
	menu_list[9].value_max[1]=14;
	menu_list[9].menu_id=6;
	menu_list[9].menu_item_count = 2;
	menu_list[9].menu_pointer=0;
	menu_list[9].fun_ptr = &set_relay_Hysteresis;
	menu_list[9].run_on_exit=1;
	
	strcpy(menu_list[10].menu_name , "PID Coefficients");
	strcpy(menu_list[10].menu_strings[0], " P: %d ");
	strcpy(menu_list[10].menu_strings[1], " I: %.1f ");
	strcpy(menu_list[10].menu_strings[2], " D: %.1f ");
	menu_list[10].next_menu_id[0]=10;
	menu_list[10].next_menu_id[1]=10;
	menu_list[10].next_menu_id[2]=10;
	menu_list[10].next_menu_id[3]=0;
	menu_list[10].values[0]=100;
	menu_list[10].values[1]=1;
	menu_list[10].values[2]=0;
	menu_list[10].value_resolution[0]=1;
	menu_list[10].value_resolution[1]=0.1000;
	menu_list[10].value_resolution[2]=0.1000;
	menu_list[10].value_max[0]=400;
	menu_list[10].value_max[1]=20;
	menu_list[10].value_max[2]=10;
	menu_list[10].menu_id=7;
	menu_list[10].menu_item_count = 3;
	menu_list[10].menu_pointer=0;
	menu_list[10].fun_ptr = &set_pid_coefficients;
	menu_list[10].run_on_exit=1;
	
	strcpy(menu_list[11].menu_name , "Time");
	strcpy(menu_list[11].menu_strings[0], " Hour: %d ");
	strcpy(menu_list[11].menu_strings[1], " Minute: %d ");
//	strcpy(menu_list[11].menu_strings[2], " Day: %d ");
//	strcpy(menu_list[11].menu_strings[3], " Month: %d ");
//	strcpy(menu_list[11].menu_strings[4], " Year: %d ");
	strcpy(menu_list[11].menu_strings[2], " OK ");
	menu_list[11].next_menu_id[0]=11;
	menu_list[11].next_menu_id[1]=11;
//	menu_list[11].next_menu_id[2]=8;
//	menu_list[11].next_menu_id[3]=8;
//	menu_list[11].next_menu_id[4]=8;
	menu_list[11].next_menu_id[2]=0;
	menu_list[11].values[0]=12;
	menu_list[11].values[1]=30;
	menu_list[11].value_resolution[0]=1.000;
	menu_list[11].value_resolution[1]=1.000;
	menu_list[11].value_max[0]=23;
	menu_list[11].value_max[1]=59;
	menu_list[11].menu_id=11;
	menu_list[11].menu_item_count = 3;
	menu_list[11].menu_pointer=0;
	menu_list[11].fun_ptr = &set_date_time;
	menu_list[11].run_on_exit=0;
	
	strcpy(menu_list[12].menu_name , "Step 1");
	strcpy(menu_list[12].menu_strings[0] , " Bath Temperature:%.1f ");
	strcpy(menu_list[12].menu_strings[1] , " OK ");
	menu_list[12].next_menu_id[0]=12;
	menu_list[12].next_menu_id[1]=13;
	menu_list[12].values[0]=25;
	menu_list[12].value_resolution[0]=5.0000;
	menu_list[12].value_max[0]=70;
	menu_list[12].menu_id=12;
	menu_list[12].menu_item_count = 2;
	menu_list[12].menu_pointer=0;
	menu_list[12].fun_ptr = &temp_calibration_step1;
	menu_list[12].run_on_exit=0;
	
	strcpy(menu_list[13].menu_name , " Step 1 ");
	strcpy(menu_list[13].menu_strings[0],  " Calibrating ... ");
	strcpy(menu_list[13].menu_strings[1] , "  ");
	strcpy(menu_list[13].menu_strings[2] , " Please Wait ");
	menu_list[13].next_menu_id[0]=13;
	menu_list[13].next_menu_id[1]=13;
	menu_list[13].next_menu_id[2]=13;
	menu_list[13].menu_id=13;
	menu_list[13].menu_item_count = 3;
	menu_list[13].menu_pointer=1;
	menu_list[13].fun_ptr = &temp_calibration_waiting_1;
	menu_list[13].run_on_exit=0;
	
	strcpy(menu_list[14].menu_name , " Step 2 ");
	strcpy(menu_list[14].menu_strings[0] , " Bath Temperature:%.1f ");
	strcpy(menu_list[14].menu_strings[1] , " OK ");
	menu_list[14].next_menu_id[0]=14;
	menu_list[14].next_menu_id[1]=15;
	menu_list[14].menu_id=14;
	menu_list[14].values[0]=35;
	menu_list[14].value_resolution[0]=5.0000;
	menu_list[14].value_max[0]=80;
	menu_list[14].menu_item_count = 2;
	menu_list[14].menu_pointer=0;
	menu_list[14].fun_ptr = &temp_calibration_step2;
	menu_list[14].run_on_exit=0;
	
	strcpy(menu_list[15].menu_name , " Step 2 ");
	strcpy(menu_list[15].menu_strings[0],  " Calibrating ... ");
	strcpy(menu_list[15].menu_strings[1] , "  ");
	strcpy(menu_list[15].menu_strings[2] , " Please Wait ");
	menu_list[15].next_menu_id[0]=15;
	menu_list[15].next_menu_id[1]=15;
	menu_list[15].next_menu_id[2]=15;
	menu_list[15].menu_id=15;
	menu_list[15].menu_item_count = 3;
	menu_list[15].menu_pointer=1;
	menu_list[15].fun_ptr = &temp_calibration_waiting_2;
	menu_list[15].run_on_exit=0;
	
	strcpy(menu_list[16].menu_name , " Step 3 ");
	strcpy(menu_list[16].menu_strings[0],  " Calibration Done ");
	strcpy(menu_list[16].menu_strings[1] , " OK ");
	menu_list[16].next_menu_id[0]=16;
	menu_list[16].next_menu_id[1]=0;
	menu_list[16].menu_id=16;
	menu_list[16].menu_item_count = 2;
	menu_list[16].menu_pointer=1;
	menu_list[16].fun_ptr = &temp_calculate_calibration_coefficients;
	menu_list[16].run_on_exit=1;
	
	strcpy(menu_list[17].menu_name , "relay");
	strcpy(menu_list[17].menu_strings[0], " relay1:| <supply>,<drain>,<kcl>,<wash>");
	strcpy(menu_list[17].menu_strings[1], " relay2:| <supply>,<drain>,<kcl>,<wash>");
	strcpy(menu_list[17].menu_strings[2], " relay3:| <supply>,<drain>,<kcl>,<wash>");
	strcpy(menu_list[17].menu_strings[3], " relay4:| <supply>,<drain>,<kcl>,<wash>");
	menu_list[17].next_menu_id[0]=17;
	menu_list[17].next_menu_id[1]=17;
	menu_list[17].next_menu_id[2]=17;
	menu_list[17].next_menu_id[3]=17;
	menu_list[17].values[0]=0;
	menu_list[17].values[1]=0;
	menu_list[17].values[2]=0;
	menu_list[17].values[3]=0;
	menu_list[17].value_resolution[0]=1;
	menu_list[17].value_resolution[1]=1;
	menu_list[17].value_resolution[2]=1;
	menu_list[17].value_resolution[3]=1;
	menu_list[17].value_max[0]=3;
	menu_list[17].value_max[1]=3;
	menu_list[17].value_max[2]=3;
	menu_list[17].value_max[3]=3;
	menu_list[17].menu_id=17;
	menu_list[17].menu_item_count = 4;
	menu_list[17].menu_pointer=0;
	menu_list[17].fun_ptr = NULL;
	menu_list[17].run_on_exit=0;
	
	
	strcpy(menu_list[18].menu_name , "Manual Wash");
	strcpy(menu_list[18].menu_strings[0], " supply:| <OFF>,<ON>");
	strcpy(menu_list[18].menu_strings[1], " drain:| <OFF>,<ON>");
	strcpy(menu_list[18].menu_strings[2], " kcl:| <OFF>,<ON>");
	strcpy(menu_list[18].menu_strings[3], " wash:| <OFF>,<ON>");
	menu_list[18].next_menu_id[0]=18;
	menu_list[18].next_menu_id[1]=18;
	menu_list[18].next_menu_id[2]=18;
	menu_list[18].next_menu_id[3]=18;
	menu_list[18].values[0]=0;
	menu_list[18].values[1]=0;
	menu_list[18].values[2]=0;
	menu_list[18].values[3]=0;
	menu_list[18].value_resolution[0]=1;
	menu_list[18].value_resolution[1]=1;
	menu_list[18].value_resolution[2]=1;
	menu_list[18].value_resolution[3]=1;
	menu_list[18].value_max[0]=1;
	menu_list[18].value_max[1]=1;
	menu_list[18].value_max[2]=1;
	menu_list[18].value_max[3]=1;
	menu_list[18].menu_id=18;
	menu_list[18].menu_item_count = 4;
	menu_list[18].menu_pointer=0;
	menu_list[18].fun_ptr = NULL;
	menu_list[18].run_on_exit=0;
}
void update_menu_from_variables(void)
{
	// pid,relay link to coeff and hysteresis
	menu_list[8].values[2]=menu_list[8].values[1];
	if(menu_list[8].values[1] == 1)
	{
		menu_list[8].next_menu_id[2]=9;
		menu_list[8].menu_item_count = 3;
	}
	else
	{
		menu_list[8].next_menu_id[2]=10;
		menu_list[8].menu_item_count = 4;
	}
	//relay max min restriction
	if(menu_list[9].values[1] > menu_list[9].values[0])
	{
		menu_list[9].values[1] = menu_list[9].values[0];
	}
	menu_list[3].values[1] = progress;//calibration progress
	menu_list[5].values[1] = progress;	
	
	if(progress < 25)
	{
		strcpy(menu_list[3].menu_strings[1] , " #### ");
		strcpy(menu_list[5].menu_strings[1] , " #### ");
		strcpy(menu_list[13].menu_strings[1] , " #### ");
		strcpy(menu_list[15].menu_strings[1] , " #### ");
	}
	if(progress >= 25 && progress < 50)
	{
		strcpy(menu_list[3].menu_strings[1] , " ######## ");
		strcpy(menu_list[5].menu_strings[1] , " ######## ");
		strcpy(menu_list[13].menu_strings[1] , " ######## ");
		strcpy(menu_list[15].menu_strings[1] , " ######## ");
	}
	if(progress > 50 && progress < 75)
	{
		strcpy(menu_list[3].menu_strings[1] , " ############ ");
		strcpy(menu_list[5].menu_strings[1] , " ############ ");
		strcpy(menu_list[13].menu_strings[1] , " ############ ");
		strcpy(menu_list[15].menu_strings[1] , " ############ ");
	}
	if(progress > 75 && progress < 100)
	{
		strcpy(menu_list[3].menu_strings[1] , " ################ ");
		strcpy(menu_list[5].menu_strings[1] , " ################ ");
		strcpy(menu_list[13].menu_strings[1] , " ################ ");
		strcpy(menu_list[15].menu_strings[1] , " ################ ");
	}
	
	if( progress == 100 )
	{
		menu_list[5].next_menu_id[2]=6;
		menu_list[3].next_menu_id[2]=4;
		menu_list[15].next_menu_id[2]=16;
		menu_list[13].next_menu_id[2]=14;
		strcpy(menu_list[3].menu_strings[0],  " Calibration Done ");
		strcpy(menu_list[5].menu_strings[0],  " Calibration Done ");
		strcpy(menu_list[3].menu_strings[2] , " OK ");
		strcpy(menu_list[5].menu_strings[2] , " OK ");
		strcpy(menu_list[13].menu_strings[0],  " Calibration Done ");
		strcpy(menu_list[15].menu_strings[0],  " Calibration Done ");
		strcpy(menu_list[13].menu_strings[2] , " OK ");
		strcpy(menu_list[15].menu_strings[2] , " OK ");

	}
	else
	{
		menu_list[5].next_menu_id[2]=5;
		menu_list[3].next_menu_id[2]=3;
		menu_list[15].next_menu_id[2]=15;
		menu_list[13].next_menu_id[2]=13;
		strcpy(menu_list[3].menu_strings[0],  " Calibrating ... ");
		strcpy(menu_list[5].menu_strings[0],  " Calibrating ... ");
		strcpy(menu_list[3].menu_strings[2] , " Please Wait ");
		strcpy(menu_list[5].menu_strings[2] , " Please Wait ");
		strcpy(menu_list[13].menu_strings[0],  " Calibrating ... ");
		strcpy(menu_list[15].menu_strings[0],  " Calibrating ... ");
		strcpy(menu_list[13].menu_strings[2] , " Please Wait ");
		strcpy(menu_list[15].menu_strings[2] , " Please Wait ");
	}
	
//	relay_on_off(supply_func_num,supply_relay_state);
//	relay_on_off(drain_func_num,drain_relay_state);
//	relay_on_off(kcl_func_num,kcl_relay_state);
//	relay_on_off(wash_func_num,wash_relay_state);
	
	if(menu_list[8].values[0] == 0 && menu_list[8].values[1]==1 && pump_on_off_state == 1)
	{
		strcpy(menu_list[0].menu_strings[5] , "K1");
		menu_list[0].x_position[5]=55;
	}
	if(menu_list[8].values[0] == 0 && menu_list[8].values[1]==1 && pump_on_off_state == 0)
	{
		strcpy(menu_list[0].menu_strings[5] , " ");
	}
	if(menu_list[8].values[0] == 0 && menu_list[8].values[1]==0)
	{
		strcpy(menu_list[0].menu_strings[5] ,"%.1f mA");
		menu_list[0].x_position[5]=105;
	}
	if(menu_list[8].values[0] == 1)
	{
		strcpy(menu_list[0].menu_strings[5] , " ");
	}
		
	menu_list[0].values[5] = output_mA; 
	menu_list[0].values[0] = pH;
	menu_list[0].values[2] = temp;
	if(pH < 10)
	{
		menu_list[0].x_position[1]=95;
	}
	else
	{
		menu_list[0].x_position[1]=102;
	}
	
}


void print_main_page(int active_menu)
{
		int text_width=0;
		GLCD_ClearScreen();
		for(int i=0 ; i < menu_list[active_menu].menu_item_count ; i++)
		{
			
			if(menu_list[active_menu].font[i] == 1)
			{
						glcd_set_font_with_num(1);
			}
			if(menu_list[active_menu].font[i] == 0)
			{
						glcd_set_font_with_num(0);
			}	
			char Menu_strings_buff[25];
			char *menu_strings_buff = Menu_strings_buff;
			char Final_menu_strings[25];
			char *final_menu_strings = Final_menu_strings;
			strcpy(menu_strings_buff , menu_list[active_menu].menu_strings[i]);
			if (strstr(menu_strings_buff, "%d") != 0)
			{
				int count =0;
				const char *tmp = menu_strings_buff;
				while(strstr(tmp,"%d")!= 0) // fined number of %d in string
				{
					 tmp = strstr(tmp,"%d");
					 count++;
					 tmp++;
				}
				
				if(count == 1)
				{
					sprintf(final_menu_strings, menu_strings_buff , (int)(menu_list[active_menu].values[i]));
				}
				if(count == 2)
				{
					sprintf(final_menu_strings, menu_strings_buff , (int)(menu_list[active_menu].values[i]),(int)(menu_list[active_menu].values[i+1]));
					i++;
				}
			}
			else if (strstr(menu_strings_buff, "%02d") != 0)
			{
				int count =0;
				const char *tmp = menu_strings_buff;
				while(strstr(tmp,"%02d")!= 0) // fined number of %d in string
				{
					 tmp = strstr(tmp,"%02d");
					 count++;
					 tmp++;
				}
				
				if(count == 1)
				{
					sprintf(final_menu_strings, menu_strings_buff , (int)(menu_list[active_menu].values[i]));
				}
				if(count == 2)
				{
					sprintf(final_menu_strings, menu_strings_buff , (int)(menu_list[active_menu].values[i]),(int)(menu_list[active_menu].values[i+1]));
					i++;
				}
			}
			else if (strstr(menu_strings_buff, "%.1f") != 0)
			{
				sprintf(final_menu_strings, menu_strings_buff , (menu_list[active_menu].values[i]));
			}
			else if (strstr(menu_strings_buff, "%.2f") != 0)
			{
				sprintf(final_menu_strings, menu_strings_buff , (menu_list[active_menu].values[i]));
			}
			else if(strstr(menu_strings_buff, ",") != 0)
			{			
				final_menu_strings = strtok(menu_strings_buff , ",");
				for(int j=0 ; j<(int)(menu_list[active_menu].values[i]) ; j++)
				{
					final_menu_strings = strtok(NULL , ",");
				}
			}
			else
			{
				strcpy(final_menu_strings , menu_list[active_menu].menu_strings[i]);
			}
			text_width = CalcTextWidthEN(final_menu_strings);
			glcd_draw_string_xy(menu_list[active_menu].x_position[i] - (text_width/2),menu_list[active_menu].y_position[i],final_menu_strings,0,0,0);
		}
}

void print_menu(int active_menu)
{

		int print_offset=0;
		GLCD_ClearScreen();
		glcd_set_font_with_num(0);
		
		print_offset = (128 - CalcTextWidthEN( menu_list[active_menu].menu_name))/2;
		glcd_draw_string_xy(print_offset,0,menu_list[active_menu].menu_name,0,0,0);
		GLCD_Line(10,10,117,10);
		for(int i=0 ; i < menu_list[active_menu].menu_item_count ; i++)
		{
			char Menu_strings_buff[40];
			char *menu_strings_buff = Menu_strings_buff;
			char Final_menu_strings[40];
			char *final_menu_strings = Final_menu_strings;
			
			strcpy(menu_strings_buff , menu_list[active_menu].menu_strings[i]);
			if (strstr(menu_strings_buff, "%d") != 0)
			{
				sprintf(final_menu_strings, menu_strings_buff , (int)(menu_list[active_menu].values[i]));
			}
			else if (strstr(menu_strings_buff, "%.1f") != 0)
			{
				sprintf(final_menu_strings, menu_strings_buff , (menu_list[active_menu].values[i]));
			}
			else if (strstr(menu_strings_buff, "%.2f") != 0)
			{
				sprintf(final_menu_strings, menu_strings_buff , (menu_list[active_menu].values[i]));
			}
			else if(strstr(menu_strings_buff, "|") != 0)
			{			
				
				char chank1[35];
				char* Chank1 = chank1;
				char chank2[35];
				char* Chank2 = chank2;
				char chank3[35];
				char* Chank3 = chank3;
				Chank1 = strtok(menu_strings_buff , "|");
				Chank2 = strtok(NULL , "|");
				
				
				Chank3 = strtok(Chank2 , ",");
				
				for(int j=0 ; j<(int)(menu_list[active_menu].values[i]) ; j++)
				{
					Chank3 = strtok(NULL , ",");
				}
				sprintf(final_menu_strings, "%s%s",Chank1, Chank3);
			}
			else if(strstr(menu_strings_buff, ",") != 0)
			{			
				final_menu_strings = strtok(menu_strings_buff , ",");
				for(int j=0 ; j<(int)(menu_list[active_menu].values[i]) ; j++)
				{
					final_menu_strings = strtok(NULL , ",");
				}
			}
			else
			{
				strcpy(final_menu_strings , menu_list[active_menu].menu_strings[i]);
			}


			print_offset = (128 - CalcTextWidthEN( final_menu_strings))/2;
			if(i == menu_list[active_menu].menu_pointer)
			{
				glcd_draw_string_xy(print_offset,i*9+14,final_menu_strings,0,1,0);
			}
			else
			{ 
				glcd_draw_string_xy(print_offset,i*9+14,final_menu_strings,0,0,0);
			}
		}
	
}

void get_user_input(uint8_t *input,int *active_menu)
{
	if(input[0]=='\n')
	{
		if(*active_menu == 0)
		{
			*active_menu = 1;
		}
		else
		{
			if(menu_list[*active_menu].menu_strings[menu_list[*active_menu].menu_pointer][1] == 'O' && menu_list[*active_menu].menu_strings[menu_list[*active_menu].menu_pointer][2] == 'K')
			{
				GLCD_ClearScreen();
				glcd_set_font_with_num(0);
				glcd_draw_string_xy(35,28,"Please Wait",0,0,0);
				menu_list[*active_menu].fun_ptr();
			}
			*active_menu = menu_list[*active_menu].next_menu_id[menu_list[*active_menu].menu_pointer];
			
		}
	}
	if(input[0] == 'e')
	{
		if(menu_list[*active_menu].run_on_exit == 1)
		{
			GLCD_ClearScreen();
			glcd_set_font_with_num(0);
			glcd_draw_string_xy(35,28,"Please Wait",0,0,0);
			menu_list[*active_menu].fun_ptr();
		}
		*active_menu = 0;
		delete_ph_calibration_task_flag = 1;
		delete_temp_calibration_task_flag = 1;
	}
	if(input[0] == 'w')
	{
		if(menu_list[*active_menu].menu_pointer > 0)
		{
		menu_list[*active_menu].menu_pointer--;
		}
		else
		{
			menu_list[*active_menu].menu_pointer = menu_list[*active_menu].menu_item_count-1;
		}
	}
	if(input[0] == 's')
	{
		if(menu_list[*active_menu].menu_pointer < menu_list[*active_menu].menu_item_count-1)
		{
		menu_list[*active_menu].menu_pointer++;
		}
		else
		{
			menu_list[*active_menu].menu_pointer = 0;
		}
	}
	if(input[0] == 'd')
	{
		char sprintf_buff[10];
		if(menu_list[*active_menu].values[menu_list[*active_menu].menu_pointer] < menu_list[*active_menu].value_max[menu_list[*active_menu].menu_pointer])
		{
			menu_list[*active_menu].values[menu_list[*active_menu].menu_pointer] += menu_list[*active_menu].value_resolution[menu_list[*active_menu].menu_pointer] ;
			//sprintf(sprintf_buff,"value:%f\n",menu_list[*active_menu].values[menu_list[*active_menu].menu_pointer]);
			//HAL_UART_Transmit(&huart2,(uint8_t *)sprintf_buff,10,100);
		}
		else if(menu_list[*active_menu].value_resolution[menu_list[*active_menu].menu_pointer] != 0)
		{
			menu_list[*active_menu].values[menu_list[*active_menu].menu_pointer] = 0;
			//sprintf(sprintf_buff,"value:%f\n",menu_list[*active_menu].values[menu_list[*active_menu].menu_pointer]);
			//MAX485_send_string((uint8_t *)sprintf_buff,13,100);
		}
	}
	if(input[0] == 'a')
	{
		char sprintf_buff[10];
		if(menu_list[*active_menu].values[menu_list[*active_menu].menu_pointer] > 0.1)
		{
			menu_list[*active_menu].values[menu_list[*active_menu].menu_pointer] -= menu_list[*active_menu].value_resolution[menu_list[*active_menu].menu_pointer] ;
			//sprintf(sprintf_buff,"value:%f\n",menu_list[*active_menu].values[menu_list[*active_menu].menu_pointer]);
			//MAX485_send_string((uint8_t *)sprintf_buff,13,100);
		}
		else if(menu_list[*active_menu].value_resolution[menu_list[*active_menu].menu_pointer] != 0)
		{
			menu_list[*active_menu].values[menu_list[*active_menu].menu_pointer] = menu_list[*active_menu].value_max[menu_list[*active_menu].menu_pointer];
			//sprintf(sprintf_buff,"value:%f\n",menu_list[*active_menu].values[menu_list[*active_menu].menu_pointer]);
			//MAX485_send_string((uint8_t *)sprintf_buff,13,100);
		}
	}	
}
